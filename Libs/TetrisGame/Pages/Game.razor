@page "/tetris"
@using TetrisGame.Components
@using TetrisGame.Models
@using System.Globalization
@using Microsoft.JSInterop
@implements IAsyncDisposable // Important pour nettoyer l'Engine
@inject IJSRuntime JSRuntime // Injecte le service JS Runtime


<h3>Jeu Tetris</h3>

Remplacer "MonAppBlazor" par le nom réel de votre projet

<div class="tetris-layout">

    <div class="margin-column">
        @* Vide *@
    </div>

    <div class="info-column">
        <div class="score-zone">
            <span>Meilleur Score:</span>
            <span class="score-value">@_bestScore</span>
        </div>
        <div class="controls-zone">
            <button class="start-button" @onclick="StartGame" disabled="@_isGameRunning">
                @(_isGameRunning ? "En Cours..." : "Démarrer")
            </button>
        </div>
        <div class="preview-zone">

        </div>
    </div>

    <div class="spacer-column" style="width:40px">
        @* Vide *@
    </div>

    <div class="game-area-column">
        <div class="board-game">
            @* Boucle pour générer le Board *@
            @for (int row = 0; row < 21; row++)
            {
                @for (int col = 0; col < 10; col++)
                {
                    ushort cellValue = _dataGrid[row, col];
                    <Block Type="@cellValue" />
                }
            }
        </div>
    </div>

</div>

@code {
    private Engine? _engine;
    private bool _isGameRunning = false;
    private int _bestScore = 0;
    private ushort[,] _dataGrid = {
   // 0  1  2  3  4  5  6  7  8  9
    { 10, 10, 10, 11, 10, 10, 10, 10, 10, 10 }, // Drop Pos
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 1
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 2
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 3
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 4
    { 0, 0, 0, 0, 0, 2, 2, 0, 0, 0 }, // 5
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 6
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 7
    { 0, 0, 0, 0, 0, 0, 3, 0, 0, 0 }, // 8
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 9
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 10
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 11
    { 1, 2, 3, 4, 5, 6, 7, 0, 0, 0 }, // 12
    { 1, 6, 5, 4, 3, 0, 0, 0, 0, 0 }, // 13
    { 1, 6, 5, 4, 3, 0, 0, 0, 0, 0 }, // 14
    { 1, 6, 5, 4, 3, 0, 0, 0, 0, 0 }, // 15
    { 1, 6, 5, 4, 3, 0, 0, 0, 0, 0 }, // 16
    { 1, 6, 5, 4, 3, 0, 0, 0, 0, 0 }, // 17
    { 1, 6, 5, 4, 3, 0, 0, 0, 0, 0 }, // 18
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 19
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }  // 20
    };

    private void ResetData()
    {
        _dataGrid = new ushort[20, 10];
        for (int row = 0; row < 20; row++)
        {
            for (int col = 0; col < 10; col++)
            {
                _dataGrid[row, col] = 0;
            }
        }
    }
    private async Task StartGame()
    {
        if (_engine == null)
        {
            // Crée l'instance de l'Engine en lui passant la méthode Update de ce composant
            _engine = new Engine(JSRuntime, GameUpdate, OnTick, TimeSpan.FromSeconds(0.5));
            await _engine.StartAsync();
            Console.WriteLine("Engine instance created and started.");
        }
    }

    private async Task StopGame()
    {
        if (_engine != null)
        {
            await _engine.StopAsync();
            // _engine.DisposeAsync() est appelé dans le Dispose du composant
            _engine = null; // Permet de recréer si nécessaire
            Console.WriteLine("Engine instance stopped.");
        }
    }

    // C'est la méthode qui sera appelée ~60 fois par seconde par l'Engine
    private void GameUpdate(TimeSpan deltaTime)
    {
        // ----- Logique de mise à jour du jeu -----

        // ----- Mise à jour du visuel (via style) -----

        // ----- Notification à Blazor de rafraîchir l'interface -----
        // !! IMPORTANT !! Comme GameUpdate est appelé depuis JS Interop (en dehors du contexte de Blazor),
        // il faut explicitement notifier Blazor que l'état a changé pour que le rendu soit mis à jour.
        InvokeAsync(StateHasChanged);
    }
    private void OnTick()
    {
        _dataGrid[0, 0] = (ushort)Random.Shared.Next(1, 7);
        _dataGrid[1, 1] = (ushort)Random.Shared.Next(1, 7);
        _dataGrid[0, 2] = (ushort)Random.Shared.Next(1, 7);
        _dataGrid[0, 3] = (ushort)Random.Shared.Next(1, 7);


        // Mettre ici la logique qui doit s'exécuter à intervalle régulier
        // Par exemple: vérifier des conditions de jeu, faire spawner des ennemis, etc.

        // Si cette méthode modifie quelque chose qui doit être affiché, il faut aussi notifier Blazor
        InvokeAsync(StateHasChanged);
    }

    // Implémentation de IAsyncDisposable pour nettoyer proprement l'Engine
    public async ValueTask DisposeAsync()
    {
        Console.WriteLine("Disposing Game Component...");
        if (_engine != null)
        {
            // Ceci appellera StopAsync() à l'intérieur de DisposeAsync de l'Engine
            await _engine.DisposeAsync();
            _engine = null;
        }
    }
}
